// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(number) {
    return new Intl.NumberFormat('ru-RU').format(number)
}

// Emoji –¥–ª—è —Å—á–µ—Ç–æ–≤
const accountTypeEmoji = {
    deposit: 'üè¶',
    debit: 'üí≥',
    credit: 'üèß',
    savings: 'üêñ',
    investment: 'üìà',
    cash: 'üíµ',
    other: 'üè∑Ô∏è'
}

// Emoji –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function getEmoji(category) {
    const map = {
        '–µ–¥–∞': 'üçî',
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöå',
        '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üéÆ',
        '–∂–∏–ª—å–µ': 'üè†',
        '–∑–¥–æ—Ä–æ–≤—å–µ': 'üíä',
        '–æ–¥–µ–∂–¥–∞': 'üëï',
        '–¥—Ä—É–≥–æ–µ': 'üí°',
        '–¥–æ—Ö–æ–¥': 'üí∞'
    }
    return map[category] || 'üí∏';
}

// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
function escapeHtml(str) {
    if (!str) return ''
    return String(str).replace(/[&<>"']/g, function (s) {
        return ({'&':'&amp','<':'&lt','>':'&gt','"':'&quot',"'":"&#39"})[s]
    })
}
// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
function adjustFontSize(element, text, type) {
    if (!element) {
        console.error("–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è adjustFontSize –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
        return
    }
    const length = text.length
    element.style.whiteSpace = 'normal'
    element.style.textOverflow = 'clip'
    element.style.overflow = 'visible'

    let fontSize = 1 // = 1em
    const baseSize = {
        small: 1,
        medium: 1.1,
        large: 1.2
    }

    const getScaleFactor = (len, type) => {
        const baseScale = Math.max(0.4, 1 - (len - 8) * 0.05)
        switch(type) {
            case 'small': return baseScale * 0.9
            case 'medium': return baseScale * 1
            case 'large': return baseScale * 1.1
            default: return baseScale
        }
    }

    fontSize = baseSize[type] * (length <= 8 ? 1 : getScaleFactor(length, type))

    const minSizes = {
        small: 0.45,
        medium: 0.85,
        large: 0.65
    }
    
    fontSize = Math.max(fontSize, minSizes[type])
    element.style.fontSize = fontSize + "em"
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º/–¥–∞—Ç–∞–º–∏ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ/–î–æ–±–∞–≤–ª–µ–Ω–æ) ---

function pad(n) { return n < 10 ? '0' + n : '' + n }

// Helper-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è ISO week number
function getWeekNumber(d) {
    d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()))
    d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7))
    var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1))
    var weekNo = Math.ceil((((d - yearStart) / 86400000) + 1) / 7)
    return [d.getUTCFullYear(), weekNo]
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –Ω–µ–¥–µ–ª–∏ (YYYY-WXX)
function getWeekKey(d) {
    const [year, weekNo] = getWeekNumber(d)
    return `${year}-W${pad(weekNo)}`
}

function getLastNMonthsKeys(n, endDate = new Date()) {
    const keys = []
    const d = new Date(endDate.getFullYear(), endDate.getMonth(), 1)
    for (let i = 0; i < n; i++) {
        const year = d.getFullYear()
        const month = d.getMonth() + 1
        keys.unshift(`${year}-${pad(month)}`)
        d.setMonth(d.getMonth() - 1)
    }
    return keys
}

// –î–û–ë–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è N –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–¥–µ–ª—å
function getLastNWeeksKeys(n, endDate = new Date()) {
    const keys = []
    const d = new Date(endDate)
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    d.setDate(d.getDate() - (d.getDay() === 0 ? 6 : d.getDay() - 1)) 

    for (let i = 0; i < n; i++) {
        keys.unshift(getWeekKey(d))
        d.setDate(d.getDate() - 7) // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏
    }
    return keys
}

function getDateRange(period) {
    const now = new Date()
    let startDate, endDate

    switch(period) {
        case 'week':
            startDate = new Date(now)
            startDate.setDate(now.getDate() - now.getDay() + (now.getDay() === 0 ? -6 : 1))
            startDate.setHours(0, 0, 0, 0)
            endDate = new Date(startDate)
            endDate.setDate(startDate.getDate() + 6)
            endDate.setHours(23, 59, 59, 999)
            break
        
        case 'month':
            startDate = new Date(now.getFullYear(), now.getMonth(), 1)
            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999)
            break

        case 'year':
            startDate = new Date(now.getFullYear(), 0, 1)
            endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999)
            break
        
        default: // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –º–µ—Å—è—Ü
            startDate = new Date(now.getFullYear(), now.getMonth(), 1)
            endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999)
            break
    }
    return { startDate, endDate }
}

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let income, expenses, accounts, goals, incomeTransactions, expensesTransactions, editingAccountIndex, editingGoalIndex
let incomeExpenseChart, progressChart
let incomeText, expensesText, balanceText, transactionsList, accountsList
let incomeBtn, incomeModal, addIncomeBtn, incomeInput, incomeName, incomeDate, incomeTime, closeIncomeModal
let expensesBtn, expensesModal, addExpensesBtn, expensesInput, closeExpensesModal, expensesCategory, expensesDate, expensesTime, expensesName
let addAccountBtn, accountModal, accountName, accountAmount, accountType, accountDesc, saveAccountBtn, deleteAccountBtn, closeAccountModal
let viewTransactionModal, closeViewTransactionModal, viewTransactionName, viewTransactionAmount, 
    viewTransactionCategory, viewTransactionDate, viewTransactionTime, viewTransactionType,
    editViewTransaction, deleteViewTransaction, viewingTransactionIndex, viewingTransactionIsIncome
let viewAccountModal, closeViewAccountModal, viewAccountName, viewAccountAmount, 
    viewAccountType, viewAccountDesc, editViewAccount, deleteViewAccount, viewingAccountIndex
let viewGoalModal, closeViewGoalModal, viewGoalName, viewGoalTarget, 
    viewGoalCurrent, viewGoalProgress, editViewGoal, deleteViewGoal, viewingGoalIndex
let editingTransactionIndex = null
let viewGoalProgressChart = null
let editingTransactionIsIncome = null


// --- –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
function saveGoals () {
    localStorage.setItem('goals', JSON.stringify(goals))
}

function saveAccounts() {
    localStorage.setItem('accounts', JSON.stringify(accounts))
}

function formatAccountAmount(amount) {
    return formatNumber(amount) + '‚ÇΩ'
}

function renderAccounts() {
    if (!accountsList) return
    accountsList.innerHTML = ''

    if (accounts.length === 0) {
        accountsList.innerHTML = '<div class="menu-account no-accounts"><div class="menu-account-info" style="padding:.6em; text-align:center; color:#666; width:100%;">–ù–µ—Ç —Å—á–µ—Ç–æ–≤</div></div>'
        return
    }

    accounts.forEach((acc, index) => {
        const accEl = document.createElement('div')
        accEl.className = 'menu-account'
        accEl.dataset.index = index
        const emoji = accountTypeEmoji[acc.type] || accountTypeEmoji.other
        accEl.innerHTML = `
            <div class="menu-account-circle">
                <div class="menu-account-img">
                    <span>${emoji}</span>
                </div>
            </div>
            <div class="menu-account-info">
                <p class="account-name">${escapeHtml(acc.name)}</p>
                <p class="account-amount">${formatAccountAmount(acc.amount)}</p>
            </div>
        `
        accEl.addEventListener('click', () => openAccountView(index))
        accountsList.appendChild(accEl)
    })
}

let goalProgressChart = null;

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Ü–µ–ª–µ–π ---
function renderGoals() {
    const goalsList = document.getElementById('goalsList')
    if (!goalsList) return

    goalsList.innerHTML = ''

    if (goals.length === 0) {
        goalsList.innerHTML = `
            <div class="goal-item" style="text-align: center; padding: 1em; color: #666;">
                –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
            </div>
        `
        return
    }

    goals.forEach((goal, index) => {
        const progress = calcGoalProgress(goal.currentAmount, goal.targetAmount)

        const goalEl = document.createElement('div')
        goalEl.className = 'goal-item'
        goalEl.innerHTML = `
            <div class="goal-header">
                <div class="goal-title">${escapeHtml(goal.name)}</div>
                <div class="goal-percentage">${progress}%</div>
            </div>
            <div class="goal-progress">
                <canvas id="goalProgressChart-${index}"></canvas>
            </div>
            <div class="goal-amounts">
                <span>${formatNumber(goal.currentAmount)}‚ÇΩ</span>
                <span>${formatNumber(goal.targetAmount)}‚ÇΩ</span>
            </div>
        `

        goalEl.addEventListener('click', () => openGoalView(index));
        goalsList.appendChild(goalEl)
        createGoalProgressChart(index, progress)
    })
}

// --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è —Ü–µ–ª–∏ ---
function createGoalProgressChart(goalIndex, progress) {
    const ctx = document.getElementById(`goalProgressChart-${goalIndex}`)
    if (!ctx) return

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['–ü—Ä–æ–≥—Ä–µ—Å—Å'],
            datasets: [{
                data: [progress],
                backgroundColor: '#FF5858',
                borderRadius: 8,
                borderWidth: 0
            }]
        },
        options: {
            indexAxis: 'y',
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    min: 0,
                    max: 100,
                    display: false,
                    grid: {
                        display: false
                    }
                },
                y: {
                    display: false,
                    grid: {
                        display: false
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    enabled: false
                }
            }
        }
    })
}

function openGoalModalForNew() {
    editingGoalIndex = null
    const goalModal = document.getElementById('goalModal'),
        goalName = document.getElementById('goalName'),
        goalTarget = document.getElementById('goalTarget'),
        goalCurrent = document.getElementById('goalCurrent')

    if (goalName) goalName.value = ''
    if (goalTarget) goalTarget.value = ''
    if (goalCurrent) goalCurrent.value = '0'

    const titleEl = document.getElementById('goalModalTitle')
    if (titleEl) titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å'

    goalModal.style.display = 'block'
}

function calcGoalProgress(current, target) {
    if (target === 0) return 0
    const progress = (current / target) * 100
    return Math.min(Math.round(progress), 100)
}

function openGoalModalForEdit(index) {
    const goal = goals[index]
    if (!goal) return

    editingGoalIndex = index
    const goalModal = document.getElementById('goalModal'),
        goalName = document.getElementById('goalName'),
        goalTarget = document.getElementById('goalTarget'),
        goalCurrent = document.getElementById('goalCurrent')
    
    if (goalName) goalName.value = goal.name || ''
    if (goalTarget) goalTarget.value = goal.targetAmount || 0
    if (goalCurrent) goalCurrent.value = goal.currentAmount || 0

    const titleEl = document.getElementById('goalModalTitle')
    if (titleEl) titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å'

    goalModal.style.display = 'block'
}

function saveGoalFromModal() {
    const goalName = document.getElementById('goalName')
    const goalTarget = document.getElementById('goalTarget')
    const goalCurrent = document.getElementById('goalCurrent')
    
    const name = goalName ? goalName.value.trim() : ''
    const targetAmount = goalTarget ? parseFloat(goalTarget.value) : 0
    const currentAmount = goalCurrent ? parseFloat(goalCurrent.value) : 0
    
    if (!name) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏')
        return
    }
    
    if (targetAmount <= 0) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É')
        return
    }
    
    if (currentAmount < 0) {
        alert('–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
        return
    }
    
    if (editingGoalIndex === null) {
        // –ù–æ–≤–∞—è —Ü–µ–ª—å
        const newGoal = {
            id: 'goal_' + Date.now(),
            name: name,
            targetAmount: targetAmount,
            currentAmount: currentAmount,
            createdAt: new Date().toISOString()
        }
        goals.push(newGoal)
    } else {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏
        const goal = goals[editingGoalIndex]
        goal.name = name
        goal.targetAmount = targetAmount
        goal.currentAmount = currentAmount
        goal.updatedAt = new Date().toISOString()
    }
    
    saveGoals()
    renderGoals()
    document.getElementById('goalModal').style.display = 'none'
}

function openAccountModalForNew() {
    editingAccountIndex = null
    if (!accountModal) return
    if (accountName) accountName.value = ''
    if (accountAmount) accountAmount.value = ''
    if (accountType) accountType.value = ''
    if (accountDesc) accountDesc.value = ''
    const titleEl = document.getElementById('accountModalTitle')
    if (titleEl) titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç'
    if (deleteAccountBtn) deleteAccountBtn.style.display = 'none'
    accountModal.style.display = 'block'
}

function openAccountModalForEdit(index) {
    const acc = accounts[index]
    if (!acc) return
    editingAccountIndex = index
    if (accountName) accountName.value = acc.name || ''
    if (accountAmount) accountAmount.value = acc.amount || 0
    if (accountType) accountType.value = acc.type || ''
    if (accountDesc) accountDesc.value = acc.desc || ''
    const titleEl = document.getElementById('accountModalTitle')
    if (titleEl) titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç'
    if (deleteAccountBtn) deleteAccountBtn.style.display = 'inline-block'
    accountModal.style.display = 'block'
}

function saveAccountFromModal() {
    const name = accountName ? accountName.value.trim() : ''
    let amount = accountAmount ? parseFloat(String(accountAmount.value).replace(',', '.')) : 0
    const type = accountType ? accountType.value : ''
    const desc = accountDesc ? accountDesc.value.trim() : ''

    if (!name) { alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞'); return }
    if (isNaN(amount) || amount < 0) { alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É'); return }

    if (editingAccountIndex === null) {
        const newAcc = {
            id: 'acc_' + Date.now(),
            name, amount,
            type: type || 'other',
            desc,
            createdAt: new Date().toISOString()
        }
        accounts.push(newAcc)
    } else {
        const acc = accounts[editingAccountIndex]
        if (!acc) return
        acc.name = name
        acc.amount = amount
        acc.type = type || 'other'
        acc.desc = desc
        acc.updatedAt = new Date().toISOString()
    }
    saveAccounts()
    renderAccounts()
    accountModal.style.display = 'none'
}

function deleteAccountFromModal() {
    if (editingAccountIndex === null) return
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—á–µ—Ç?')) return
    accounts.splice(editingAccountIndex, 1)
    saveAccounts()
    renderAccounts()
    accountModal.style.display = 'none'
}

function filterTransactions(transactions, period) {
    const { startDate, endDate } = getDateRange(period)
    return transactions.filter(transaction => {
        const transactionDate = new Date(transaction.date)
        return transactionDate >= startDate && transactionDate <= endDate
    })
}

function getChartData(period) {
    let labels = [],
        incomeData = [],
        expensesData = []

    const filteredExpenses = filterTransactions(expensesTransactions, period),
        filteredIncome = filterTransactions(incomeTransactions, period)
    
    switch(period) {
        case 'week':
            labels = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            incomeData = new Array(7).fill(0)
            expensesData = new Array(7).fill(0)

            filteredIncome.forEach(transaction => {
                const dayOfWeek = new Date(transaction.date).getDay()
                const adjustedDay = (dayOfWeek + 6) % 7
                incomeData[adjustedDay] += transaction.amount
            })

            filteredExpenses.forEach(transaction => {
                const dayOfWeek = new Date(transaction.date).getDay()
                const adjustedDay = (dayOfWeek + 6) % 7
                expensesData[adjustedDay] += transaction.amount
            })
            break

        case 'month':
            const currentDate = new Date(),
                currentYear = currentDate.getFullYear(),
                currentMonth = currentDate.getMonth(),
                daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate()
            
            labels = Array.from({length: daysInMonth}, (_,index) => (index + 1).toString())
            incomeData = new Array(daysInMonth).fill(0)
            expensesData = new Array(daysInMonth).fill(0)

            filteredIncome.forEach(transaction => {
                const transactionDate = new Date(transaction.date)
                const dayOfMonth = transactionDate.getDate() - 1
                if (dayOfMonth >= 0 && dayOfMonth < daysInMonth) {
                    incomeData[dayOfMonth] += transaction.amount
                }
            })
            
            filteredExpenses.forEach(transaction => {
                const transactionDate = new Date(transaction.date)
                const dayOfMonth = transactionDate.getDate() - 1
                if (dayOfMonth >= 0 && dayOfMonth < daysInMonth) {
                    expensesData[dayOfMonth] += transaction.amount
                }
            })
            break

        case 'year':
            labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
            incomeData = new Array(12).fill(0)
            expensesData = new Array(12).fill(0)

            filteredIncome.forEach(transaction => {
                const transactionDate = new Date(transaction.date)
                const month = transactionDate.getMonth()
                incomeData[month] += transaction.amount
            })
            
            filteredExpenses.forEach(transaction => {
                const transactionDate = new Date(transaction.date)
                const month = transactionDate.getMonth()
                expensesData[month] += transaction.amount
            })
            break
            
        default:
            const defaultCurrentDate = new Date()
            const defaultYear = defaultCurrentDate.getFullYear()
            const defaultMonth = defaultCurrentDate.getMonth()
            const defaultDaysInMonth = new Date(defaultYear, defaultMonth + 1, 0).getDate()
            
            labels = Array.from({length: defaultDaysInMonth}, (_, index) => (index + 1).toString())
            incomeData = new Array(defaultDaysInMonth).fill(0)
            expensesData = new Array(defaultDaysInMonth).fill(0)
    }

    return { 
        chartLabels: labels, 
        chartIncomeData: incomeData, 
        chartExpensesData: expensesData 
    }
}

function updateChart(period) {
    if (!incomeExpenseChart) return
    const { chartLabels, chartIncomeData, chartExpensesData } = getChartData(period)
    incomeExpenseChart.data.labels = chartLabels
    incomeExpenseChart.data.datasets[0].data = chartIncomeData
    incomeExpenseChart.data.datasets[1].data = chartExpensesData
    incomeExpenseChart.update()
}

// --- –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û/–ü–ï–†–ï–ú–ï–©–ï–ù–û) ---

function computeAverageForPeriod(transactions, period) {
    if (!Array.isArray(transactions) || transactions.length === 0) return 0

    if (period === 'month') {
        const keys = getLastNMonthsKeys(12)
        const totals = Object.fromEntries(keys.map(k => [k, 0]))
        transactions.forEach(t => {
            const d = new Date(t.date)
            if (isNaN(d)) return
            const key = `${d.getFullYear()}-${pad(d.getMonth() + 1)}`
            if (key in totals) totals[key] += t.amount
        })
        const values = Object.values(totals)
        const nonZero = values.filter(v => v > 0)
        if (nonZero.length === 0) return 0
        const sum = nonZero.reduce((s,v) => s+v, 0)
        return sum / nonZero.length
    }

    if (period === 'week') {
        const keys = getLastNWeeksKeys(12) // –ò–°–ü–†–ê–í–õ–ï–ù–û
        const totals = Object.fromEntries(keys.map(k => [k, 0]))
        transactions.forEach(t => {
            const d = new Date(t.date)
            if (isNaN(d)) return
            const key = getWeekKey(d) // –ò–°–ü–†–ê–í–õ–ï–ù–û
            if (key in totals) totals[key] += t.amount
        })
        const values = Object.values(totals)
        const nonZero = values.filter(v => v > 0)
        if (nonZero.length === 0) return 0
        const sum = nonZero.reduce((s,v) => s+v, 0)
        return sum / nonZero.length
    }

    // year
    const yearMap = {}
    transactions.forEach(t => {
        const d = new Date(t.date)
        if (isNaN(d)) return
        const y = d.getFullYear()
        yearMap[y] = (yearMap[y] || 0) + t.amount
    })
    const years = Object.keys(yearMap)
    if (years.length === 0) return 0
    const sumYears = Object.values(yearMap).reduce((s,v) => s+v, 0)
    return sumYears / years.length
}

function updateAverages(period = 'month') {
    const avgExpensesText = document.getElementById('avgExpensesText')
    const avgIncomeText = document.getElementById('avgIncomeText')

    const avgExpenses = computeAverageForPeriod(expensesTransactions, period)
    const avgIncome = computeAverageForPeriod(incomeTransactions, period)

    if (avgExpensesText) {
        const avgExpensesValue = formatNumber(Math.round(avgExpenses)) + '‚ÇΩ'
        avgExpensesText.textContent = avgExpensesValue
        adjustFontSize(avgExpensesText, avgExpensesValue, "large")
    }
    if (avgIncomeText) {
        const avgIncomeValue = formatNumber(Math.round(avgIncome)) + '‚ÇΩ'
        avgIncomeText.textContent = avgIncomeValue
        adjustFontSize(avgIncomeText, avgIncomeValue, "large")
    }
}

// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ---

function updateBalance() {
    if (balanceText) {
        const balanceValue = formatNumber(income - expenses) + "‚ÇΩ"
        balanceText.textContent = balanceValue
        adjustFontSize(balanceText, balanceValue, "large")
    }
}

function updateEconomy(period = 'month') {
    const filteredIncome = filterTransactions(incomeTransactions, period)
    const filteredExpenses = filterTransactions(expensesTransactions, period)

    const periodIncome = filteredIncome.reduce((sum, transaction) => sum + transaction.amount, 0)
    const periodExpenses = filteredExpenses.reduce((sum, transaction) => sum + transaction.amount, 0)
    const periodSavings = periodIncome - periodExpenses
    const periodPercent = periodIncome > 0 ? Math.round((periodSavings / periodIncome) * 100) : 0

    if (incomeText) {
        const incomeValue = formatNumber(periodIncome) + '‚ÇΩ'
        incomeText.textContent = incomeValue
        adjustFontSize(incomeText, incomeValue, 'small')
    }

    if (expensesText) {
        const expensesValue = formatNumber(periodExpenses) + "‚ÇΩ"
        expensesText.textContent = expensesValue
        adjustFontSize(expensesText, expensesValue, "small")
    }

    const savingsElement = document.getElementById("savingsText")
    if (savingsElement) {
        const savingsText = formatNumber(periodSavings) + "‚ÇΩ"
        savingsElement.textContent = savingsText
        adjustFontSize(savingsElement, savingsText, "medium")
    }

    const progressText = document.getElementById("progressText")
    if (progressText) {
        progressText.textContent = periodPercent + "%"
    }

    if (progressChart && progressChart.data && progressChart.data.datasets && progressChart.data.datasets[0]) {
        progressChart.data.datasets[0].data[0] = periodPercent
        progressChart.update()
    }
}

function updateContent(selectedPeriod, section = 'all') {
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${section} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: ${selectedPeriod}`)
    
    if (section === 'economy' || section === 'all') {
        updateEconomy(selectedPeriod)
    }
    if (section === 'chart' || section === 'all') {
        updateChart(selectedPeriod)
        updateAverages(selectedPeriod)
    }
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
function updateIncome(amount) {
    income += amount
    localStorage.setItem("income", income)
    updateBalance()
    updateEconomy() // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç incomeText
}

// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
function updateExpenses(amount) {
    expenses += amount
    localStorage.setItem("expenses", expenses)
    updateBalance()
    updateEconomy() // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ–±–Ω–æ–≤–∏—Ç expensesText
}

function getAllTransactions() {
    const allTransactions = [
        ...incomeTransactions.map(t => ({ ...t, type: 'income' })),
        ...expensesTransactions.map(t => ({ ...t, type: 'expense' }))
    ]
    return allTransactions.sort((a, b) => new Date(b.date) - new Date(a.date))
}

function renderTransactionsList() {
    if (!transactionsList) return
    transactionsList.innerHTML = ''

    const allTransactions = getAllTransactions()
    if (allTransactions.length === 0) {
        transactionsList.innerHTML = '<div class="transaction-item"><p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p></div>'
        return
    }

    // ... (rest of the function is unchanged, just copied here)
    const transactionsDateBlock = document.querySelector(".transactions-date")
    if (transactionsDateBlock) {
        const label = transactionsDateBlock.querySelector("p")
        const lastTransaction = allTransactions.length > 0 ? new Date(allTransactions[0].date) : new Date()

        const today = new Date()
        const yesterday = new Date()
        yesterday.setDate(today.getDate() - 1)

        let labelText = ""
        if (lastTransaction.toDateString() === today.toDateString()) labelText = "–°–µ–≥–æ–¥–Ω—è"
        else if (lastTransaction.toDateString() === yesterday.toDateString()) labelText = "–í—á–µ—Ä–∞"
        else labelText = lastTransaction.toLocaleString('ru-RU', { day: 'numeric', month: 'long' })

        if(label) label.textContent = labelText
    }

    const groups = {}
    allTransactions.forEach(t => {
        const d = new Date(t.date)
        const key = d.toDateString()
        if (!groups[key]) groups[key] = []
        groups[key].push(t)
    })

    const today = new Date()
    const yesterday = new Date()
    yesterday.setDate(today.getDate() - 1)

    function formatCompactNumber(num) {
        if (num >= 1_000_000_000) return (num / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' –º–ª—Ä–¥‚ÇΩ'
        if (num >= 1_000_000) return (num / 1_000_000).toFixed(1).replace(/\.0$/, '') + ' –º–ª–Ω‚ÇΩ'
        if (num >= 1_000) return formatNumber(num)
        return num + '‚ÇΩ'
    }

    function getEmoji(category) {
        const map = {
            '–µ–¥–∞': 'üçî',
            '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'üöå',
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'üéÆ',
            '–∂–∏–ª—å–µ': 'üè†',
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'üíä',
            '–æ–¥–µ–∂–¥–∞': 'üëï',
            '–¥—Ä—É–≥–æ–µ': 'üí°',
            '–¥–æ—Ö–æ–¥': 'üí∞'
        }
        return map[category] || 'üí∏'
    }

    Object.keys(groups)
        .sort((a, b) => new Date(b) - new Date(a))
        .forEach(dateKey => {
            const date = new Date(dateKey)
            const dateLabel =
                date.toDateString() === today.toDateString()
                    ? '–°–µ–≥–æ–¥–Ω—è'
                    : date.toDateString() === yesterday.toDateString()
                    ? '–í—á–µ—Ä–∞'
                    : date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' })

            const dateHeader = document.createElement('div')
            dateHeader.className = 'transaction-date-header'
            dateHeader.textContent = dateLabel
            transactionsList.appendChild(dateHeader)

            groups[dateKey].forEach(transaction => {
                const transactionItem = document.createElement('div')
                transactionItem.className = 'transaction-item'

                const emoji = getEmoji(transaction.category)
                const transactionName = transaction.name || (transaction.type === 'income' ? '–î–æ—Ö–æ–¥' : '–¢—Ä–∞—Ç–∞')

                const amountClass = transaction.type === 'income' ? 'positive' : 'negative'
                const amountSign = transaction.type === 'income' ? '+' : '-'
                const shortAmount = formatCompactNumber(transaction.amount)
                const trDate = new Date(transaction.date)
                const timeString = trDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })

                // –í —Ñ—É–Ω–∫—Ü–∏–∏ renderTransactionsList –∑–∞–º–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ transactionItem –Ω–∞:
                transactionItem.innerHTML = `
                    <div class="transaction-icon emoji-bg">
                        <span class="emoji">${emoji}</span>
                    </div>
                    <div class="transaction-info">
                        <p class="transaction-name">${transactionName}</p>
                        <p class="transaction-category">${transaction.category ? transaction.category : ''} <span class="transaction-time" style="color:#999; font-size:0.8em; margin-left:6px">${timeString}</span></p>
                    </div>
                    <div class="transaction-amount ${amountClass}">
                        <p>${amountSign}${shortAmount}</p>
                    </div>
                `;

                // –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                transactionItem.addEventListener('click', () => {
                    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                    const allTransactions = getAllTransactions();
                    const clickedTransaction = allTransactions.find(t => 
                        t.name === transactionName && 
                        t.amount === transaction.amount && 
                        t.date === transaction.date
                    );
                    
                    if (clickedTransaction) {
                        const isIncome = clickedTransaction.type === 'income';
                        const sourceArray = isIncome ? incomeTransactions : expensesTransactions;
                        const index = sourceArray.findIndex(t => 
                            t.name === clickedTransaction.name && 
                            t.amount === clickedTransaction.amount && 
                            t.date === clickedTransaction.date
                        );
                        
                        if (index !== -1) {
                            openTransactionView(index, isIncome);
                        }
                    }
                })
                transactionsList.appendChild(transactionItem)
            })
        })
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ---

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function openTransactionView(index, isIncome) {
    const transactions = isIncome ? incomeTransactions : expensesTransactions;
    const transaction = transactions[index];
    
    if (!transaction) return;

    viewingTransactionIndex = index;
    viewingTransactionIsIncome = isIncome;

    // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const emoji = getEmoji(transaction.category);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    viewTransactionEmoji.innerHTML = `<span class="emoji">${emoji}</span>`;
    viewTransactionName.textContent = (transaction.name || (isIncome ? '–î–æ—Ö–æ–¥' : '–¢—Ä–∞—Ç–∞')).toUpperCase();
    
    const amountText = formatNumber(transaction.amount) + '‚ÇΩ';
    viewTransactionAmount.textContent = isIncome ? '+' + amountText : '-' + amountText;
    viewTransactionAmount.className = `transaction-amount-large ${isIncome ? 'income' : 'expense'}`;
    
    viewTransactionCategory.textContent = transaction.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    
    const transactionDate = new Date(transaction.date);
    viewTransactionDate.textContent = transactionDate.toLocaleDateString('ru-RU');
    viewTransactionTime.textContent = transactionDate.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
    });
    viewTransactionType.textContent = isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';

    viewTransactionModal.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–∞
function openAccountView(index) {
    const account = accounts[index];
    
    if (!account) return;

    viewingAccountIndex = index;

    // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—á–µ—Ç–∞
    const emoji = accountTypeEmoji[account.type] || accountTypeEmoji.other;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    viewAccountEmoji.innerHTML = `<span class="emoji">${emoji}</span>`;
    viewAccountName.textContent = (account.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ').toUpperCase();
    viewAccountAmount.textContent = formatNumber(account.amount) + '‚ÇΩ';
    
    const typeNames = {
        deposit: '–í–∫–ª–∞–¥',
        debit: '–î–µ–±–µ—Ç–æ–≤—ã–π —Å—á–µ—Ç',
        credit: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å—á–µ—Ç',
        savings: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç',
        investment: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç',
        cash: '–ù–∞–ª–∏—á–Ω—ã–µ',
        other: '–î—Ä—É–≥–æ–µ'
    };
    viewAccountType.textContent = typeNames[account.type] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    viewAccountDesc.textContent = account.desc || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    const createdDate = account.createdAt ? new Date(account.createdAt) : new Date();
    viewAccountCreated.textContent = createdDate.toLocaleDateString('ru-RU');

    viewAccountModal.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–ª–∏
// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–ª–∏
function openGoalView(index) {
    const goal = goals[index];
    
    if (!goal) return;

    viewingGoalIndex = index;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    viewGoalName.textContent = (goal.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ').toUpperCase();
    viewGoalTarget.textContent = formatNumber(goal.targetAmount) + '‚ÇΩ';
    viewGoalCurrent.textContent = formatNumber(goal.currentAmount) + '‚ÇΩ';
    
    const progress = calcGoalProgress(goal.currentAmount, goal.targetAmount);
    viewGoalProgress.textContent = progress + '%';
    viewGoalAmounts.textContent = `${formatNumber(goal.currentAmount)} / ${formatNumber(goal.targetAmount)}`;
    viewGoalProgressText.textContent = progress + '%';

    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    createViewGoalProgressChart(progress);

    viewGoalModal.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–ª–∏
function createViewGoalProgressChart(progress) {
    const ctx = document.getElementById('viewGoalProgressChart');
    if (!ctx) return;

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (viewGoalProgressChart) {
        viewGoalProgressChart.destroy();
    }

    viewGoalProgressChart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            datasets: [{
                data: [progress, 100 - progress],
                backgroundColor: ['#FF5858', '#EFEFEF'],
                borderWidth: 0,
                cutout: '75%'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    enabled: false
                }
            }
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function setupViewModalHandlers() {
editViewTransaction.addEventListener('click', function() {
    viewTransactionModal.style.display = 'none';
    
    if (viewingTransactionIsIncome) {
        // –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–æ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editingTransactionIndex = viewingTransactionIndex;
        editingTransactionIsIncome = true;
        
        resetIncomeModal();
        if (incomeName) incomeName.value = incomeTransactions[viewingTransactionIndex].name || '';
        if (incomeInput) incomeInput.value = incomeTransactions[viewingTransactionIndex].amount || '';
        const date = new Date(incomeTransactions[viewingTransactionIndex].date);
        if (incomeDate) incomeDate.valueAsDate = date;
        if (incomeTime) incomeTime.value = date.toTimeString().slice(0, 5);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥"
        const titleEl = incomeModal.querySelector('h2');
        if (titleEl) titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥';
        
        incomeModal.style.display = 'block';
    } else {
        // –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editingTransactionIndex = viewingTransactionIndex;
        editingTransactionIsIncome = false;
        
        resetExpensesModal();
        if (expensesName) expensesName.value = expensesTransactions[viewingTransactionIndex].name || '';
        if (expensesInput) expensesInput.value = expensesTransactions[viewingTransactionIndex].amount || '';
        if (expensesCategory) expensesCategory.value = expensesTransactions[viewingTransactionIndex].category || '';
        const date = new Date(expensesTransactions[viewingTransactionIndex].date);
        if (expensesDate) expensesDate.valueAsDate = date;
        if (expensesTime) expensesTime.value = date.toTimeString().slice(0, 5);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—É"
        const titleEl = expensesModal.querySelector('h2');
        if (titleEl) titleEl.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞—Ç—É';
        
        expensesModal.style.display = 'block';
    }
});

    deleteViewTransaction.addEventListener('click', function() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) return;
        
        const transactions = viewingTransactionIsIncome ? incomeTransactions : expensesTransactions;
        const amount = transactions[viewingTransactionIndex].amount;
        
        transactions.splice(viewingTransactionIndex, 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        localStorage.setItem(
            viewingTransactionIsIncome ? "incomeTransactions" : "expensesTransactions", 
            JSON.stringify(transactions)
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (viewingTransactionIsIncome) {
            updateIncome(-amount);
        } else {
            updateExpenses(-amount);
        }
        
        renderTransactionsList();
        viewTransactionModal.style.display = 'none';
        
        const activeBtn = document.querySelector('.dashboard .period-btn.period-active');
        const currentPeriod = activeBtn ? activeBtn.getAttribute('data-period') : 'month';
        updateChart(currentPeriod);
        updateAverages(currentPeriod);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—á–µ—Ç–æ–≤
    editViewAccount.addEventListener('click', function() {
        viewAccountModal.style.display = 'none';
        openAccountModalForEdit(viewingAccountIndex);
    });

    deleteViewAccount.addEventListener('click', function() {
        viewAccountModal.style.display = 'none';
        editingAccountIndex = viewingAccountIndex;
        deleteAccountFromModal();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–ª–µ–π
    editViewGoal.addEventListener('click', function() {
        viewGoalModal.style.display = 'none';
        openGoalModalForEdit(viewingGoalIndex);
    });

    deleteViewGoal.addEventListener('click', function() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å?')) return;
        
        goals.splice(viewingGoalIndex, 1);
        saveGoals();
        renderGoals();
        viewGoalModal.style.display = 'none';
    });
}


// --- –§—É–Ω–∫—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–î–û–ë–ê–í–õ–ï–ù–û) ---
function resetIncomeModal() {
    if (incomeInput) incomeInput.value = ""
    if (incomeName) incomeName.value = ""
    const now = new Date()
    if (incomeDate) incomeDate.valueAsDate = now
    if (incomeTime) incomeTime.value = now.toTimeString().slice(0, 5)
}

function resetExpensesModal() {
    if (expensesInput) expensesInput.value = ""
    if (expensesName) expensesName.value = ""
    if (expensesCategory) expensesCategory.value = ""
    const now = new Date()
    if (expensesDate) expensesDate.valueAsDate = now
    if (expensesTime) expensesTime.value = now.toTimeString().slice(0, 5)
}


// --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---

function addIncome() {
    const amount = parseFloat(incomeInput.value);
    const selectedTime = incomeTime ? incomeTime.value : '',
        selectedDate = incomeDate ? incomeDate.value : '',
        name = incomeName ? incomeName.value.trim() : '';
    
    if (!isNaN(amount) && amount > 0) {
        let dateTime
        if (selectedDate && selectedTime) {
            dateTime = new Date(selectedDate + 'T' + selectedTime)
        } else {
            dateTime = new Date()
        }

        const transaction = {
            amount: amount,
            name: name || '–î–æ—Ö–æ–¥',
            category: '–¥–æ—Ö–æ–¥',
            date: dateTime.toISOString(),
        }
        
        if (editingTransactionIndex !== null && editingTransactionIsIncome) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const oldAmount = incomeTransactions[editingTransactionIndex].amount;
            incomeTransactions[editingTransactionIndex] = transaction;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã
            income = income - oldAmount + amount;
            localStorage.setItem("income", income);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            incomeTransactions.push(transaction);
            updateIncome(amount);
        }
        
        localStorage.setItem("incomeTransactions", JSON.stringify(incomeTransactions));
        
        if (editingTransactionIndex === null) {
            updateIncome(amount);
        } else {
            updateBalance();
            updateEconomy();
        }
        
        renderTransactionsList();
        
        resetIncomeModal();
        incomeModal.style.display = "none";
        editingTransactionIndex = null;
        editingTransactionIsIncome = null;
    } else {
        alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
    }

    const activeBtn = document.querySelector('.dashboard .period-btn.period-active')
    const currentPeriod = activeBtn ? activeBtn.getAttribute('data-period') : 'month'
    updateChart(currentPeriod)
    updateAverages(currentPeriod)
}

function addExpense() {
    let inputValue = expensesInput.value.trim().replace(',', '.')
    let amount = parseFloat(inputValue)
    const category = expensesCategory.value,
        selectedTime = expensesTime.value,
        selectedDate = expensesDate.value,
        name = expensesName.value.trim()

    if (!isNaN(amount) && amount !== 0 && category.trim() !== '' && name !== '') {
        amount = Math.abs(amount)
        let dateTime
        if (selectedTime && selectedDate) {
            dateTime = new Date(selectedDate + 'T' + selectedTime)
        } else {
            dateTime = new Date()
        }

        const transaction = {
            amount: amount,
            name: name,
            category: category,
            date: dateTime.toISOString(),
        }

        if (editingTransactionIndex !== null && !editingTransactionIsIncome) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const oldAmount = expensesTransactions[editingTransactionIndex].amount;
            expensesTransactions[editingTransactionIndex] = transaction;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã
            expenses = expenses - oldAmount + amount;
            localStorage.setItem("expenses", expenses);
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            expensesTransactions.push(transaction);
            updateExpenses(amount);
        }
        
        localStorage.setItem("expensesTransactions", JSON.stringify(expensesTransactions))
        
        if (editingTransactionIndex === null) {
            updateExpenses(amount);
        } else {
            updateBalance();
            updateEconomy();
        }
        
        renderTransactionsList()
        
        resetExpensesModal()
        expensesModal.style.display = "none"
        editingTransactionIndex = null;
        editingTransactionIsIncome = null;
    } else {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    }

    const activeBtn = document.querySelector('.dashboard .period-btn.period-active')
    const currentPeriod = activeBtn ? activeBtn.getAttribute('data-period') : 'month'
    updateChart(currentPeriod)
    updateAverages(currentPeriod)
}


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
document.addEventListener('DOMContentLoaded', function() {
    
    // --- 1. –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM ---
    const canvas = document.getElementById('incomeExpenseChart')
    const ctx = canvas ? canvas.getContext('2d') : null
    const ctxProgress = document.getElementById('progressBar') ? document.getElementById('progressBar').getContext('2d') : null
    const ctxChart = document.getElementById('progressChart') ? document.getElementById('progressChart').getContext('2d') : null
    
    incomeBtn = document.getElementById("incomeBtn")
    incomeModal = document.getElementById("incomeModal")
    addIncomeBtn = document.getElementById("addIncome")
    incomeInput = document.getElementById("incomeAmount")
    incomeName = document.getElementById("incomeName")
    incomeDate = document.getElementById("incomeDate")
    incomeTime = document.getElementById("incomeTime")
    expensesBtn = document.getElementById("expensesBtn")
    expensesModal = document.getElementById("expensesModal")
    addExpensesBtn = document.getElementById("addExpenses")
    expensesInput = document.getElementById("expensesAmount")
    closeIncomeModal = document.getElementById("closeIncomeModal")
    closeExpensesModal = document.getElementById("closeExpensesModal")
    incomeText = document.getElementById("incomeText")
    expensesText = document.getElementById("expensesText")
    balanceText = document.getElementById("balanceText")
    transactionsList = document.getElementById("transactionsList")
    expensesCategory = document.getElementById("expensesCategory")
    expensesDate = document.getElementById("expensesDate")
    expensesTime = document.getElementById("expensesTime")
    expensesName = document.getElementById("expensesName")
    addAccountBtn = document.getElementById("addAccountBtn")
    accountModal = document.getElementById("accountModal")
    accountName = document.getElementById("accountName")
    accountAmount = document.getElementById("accountAmount")
    accountType = document.getElementById("accountType")
    accountDesc = document.getElementById("accountDesc")
    saveAccountBtn = document.getElementById("saveAccount")
    deleteAccountBtn = document.getElementById("deleteAccount")
    accountsList = document.getElementById("accountsList")
    closeAccountModal = document.getElementById("closeAccountModal")

    viewTransactionModal = document.getElementById('viewTransactionModal');
    closeViewTransactionModal = document.getElementById('closeViewTransactionModal');
    viewTransactionName = document.getElementById('viewTransactionName');
    viewTransactionAmount = document.getElementById('viewTransactionAmount');
    viewTransactionCategory = document.getElementById('viewTransactionCategory');
    viewTransactionDate = document.getElementById('viewTransactionDate');
    viewTransactionTime = document.getElementById('viewTransactionTime');
    viewTransactionType = document.getElementById('viewTransactionType');
    editViewTransaction = document.getElementById('editViewTransaction');
    deleteViewTransaction = document.getElementById('deleteViewTransaction');

    viewAccountModal = document.getElementById('viewAccountModal');
    closeViewAccountModal = document.getElementById('closeViewAccountModal');
    viewAccountName = document.getElementById('viewAccountName');
    viewAccountAmount = document.getElementById('viewAccountAmount');
    viewAccountType = document.getElementById('viewAccountType');
    viewAccountDesc = document.getElementById('viewAccountDesc');
    editViewAccount = document.getElementById('editViewAccount');
    deleteViewAccount = document.getElementById('deleteViewAccount');

    viewGoalModal = document.getElementById('viewGoalModal');
    closeViewGoalModal = document.getElementById('closeViewGoalModal');
    viewGoalName = document.getElementById('viewGoalName');
    viewGoalTarget = document.getElementById('viewGoalTarget');
    viewGoalCurrent = document.getElementById('viewGoalCurrent');
    viewGoalProgress = document.getElementById('viewGoalProgress');
    editViewGoal = document.getElementById('editViewGoal');
    deleteViewGoal = document.getElementById('deleteViewGoal');
    
    viewTransactionEmoji = document.getElementById('viewTransactionEmoji');
    viewGoalAmounts = document.getElementById('viewGoalAmounts');
    viewGoalProgressText = document.getElementById('viewGoalProgressText');

    // –í DOMContentLoaded –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—á–µ—Ç–∞:
viewAccountEmoji = document.getElementById('viewAccountEmoji');
viewAccountCreated = document.getElementById('viewAccountCreated');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
if (closeViewTransactionModal) closeViewTransactionModal.addEventListener('click', () => viewTransactionModal.style.display = 'none');
if (closeViewAccountModal) closeViewAccountModal.addEventListener('click', () => viewAccountModal.style.display = 'none');
if (closeViewGoalModal) closeViewGoalModal.addEventListener('click', () => viewGoalModal.style.display = 'none');

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
window.addEventListener('click', (e) => {
    if (e.target === viewTransactionModal) viewTransactionModal.style.display = 'none';
    if (e.target === viewAccountModal) viewAccountModal.style.display = 'none';
    if (e.target === viewGoalModal) viewGoalModal.style.display = 'none';
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
setupViewModalHandlers();

    // --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
    incomeExpenseChart = ctx ? new Chart(ctx, {
        type: 'line',
        data: {
            labels: ['–Ø–Ω–≤','–§–µ–≤','–ú–∞—Ä','–ê–ø—Ä','–ú–∞–π','–ò—é–Ω','–ò—é–ª','–ê–≤–≥','–°–µ–Ω','–û–∫—Ç','–ù–æ—è','–î–µ–∫'],
            datasets: [
                { label: '–î–æ—Ö–æ–¥', data: [0,0,0,0,0,0,0,0,0,0,0,0], borderColor: '#FF8A5C', tension:0.4 },
                { label: '–¢—Ä–∞—Ç—ã', data: [0,0,0,0,0,0,0,0,0,0,0,0], borderColor:'#FF5858', tension:0.4 }
            ]
        },
        options: {
            responsive:true,
            maintainAspectRatio:false,
            plugins:{ legend:{ display:true, position: 'bottom' } },
            scales:{
                x:{ grid:{ display:false }, border:{ display:false } },
                y:{ display:false, grid:{ display:false } }
            }
        }
    }) : null

    progressChart = ctxProgress ? new Chart(ctxProgress, {
        type:'bar',
        data:{ labels:['–ü—Ä–æ–≥—Ä–µ—Å—Å'], datasets:[{ label:'–ü—Ä–æ–≥—Ä–µ—Å—Å', data:[0], backgroundColor:'#FF5858', borderRadius:8, stack:'base' }] },
        options:{ indexAxis:'y', scales:{ x:{ min:0, max:100, display:false }, y:{ display:false } }, plugins:{ legend:{ display:false }, tooltip:{ enabled:false } }, responsive:true, maintainAspectRatio:false }
    }) : null

    if (ctxChart) {
        const progress2 = 65
        new Chart(ctxChart, {
            type:'doughnut',
            data:{ datasets:[{ data:[progress2,100-progress2], backgroundColor:['#fff','rgba(220,220,220,0.3)'], borderWidth:0, cutout:'75%' }] },
            options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ display:false }, tooltip:{ enabled:false } } }
        })
    }

    // --- 3. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
    income = parseFloat(localStorage.getItem("income")) || 0
    expenses = parseFloat(localStorage.getItem("expenses")) || 0
    accounts = JSON.parse(localStorage.getItem("accounts")) || []
    goals = JSON.parse(localStorage.getItem('goals')) || []
    incomeTransactions = JSON.parse(localStorage.getItem("incomeTransactions")) || []
    expensesTransactions = JSON.parse(localStorage.getItem("expensesTransactions")) || []
    editingAccountIndex = null

    // --- 4. –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ UI ---
    if (incomeText && expensesText && balanceText) {
        const incomeValue = formatNumber(income) + "‚ÇΩ"
        const expensesValue = formatNumber(expenses) + "‚ÇΩ"
        const balanceValue = formatNumber(income - expenses) + "‚ÇΩ"
        incomeText.textContent = incomeValue
        expensesText.textContent = expensesValue
        balanceText.textContent = balanceValue
        adjustFontSize(incomeText, incomeValue, "small")
        adjustFontSize(expensesText, expensesValue, "small")
        adjustFontSize(balanceText, balanceValue, "large")
    } else {
        console.error("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (incomeText, expensesText, balanceText) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    resetIncomeModal()
    resetExpensesModal()

    // --- 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π ---

    // –ú–æ–¥–∞–ª–∫–∞ –°—á–µ—Ç–æ–≤
    if (addAccountBtn) addAccountBtn.addEventListener('click', openAccountModalForNew)
    if (saveAccountBtn) saveAccountBtn.addEventListener('click', saveAccountFromModal)
    if (deleteAccountBtn) deleteAccountBtn.addEventListener('click', deleteAccountFromModal)
    if (closeAccountModal) closeAccountModal.addEventListener('click', () => { if (accountModal) accountModal.style.display = 'none' })

    const accountMenu = document.getElementById('accountMenu')
    if (accountMenu) {
        accountMenu.addEventListener('click', (e) => {
            const target = e.target
            if (target && (target.id === 'addAccountBtn' || target.parentElement.id === 'addAccountBtn')) return
            openAccountModalForNew()
        })
    }

    // –ú–æ–¥–∞–ª–∫–∞ –¶–µ–ª–µ–π
    const goalModal = document.getElementById('goalModal')
    const closeGoalModal = document.getElementById('closeGoalModal')
    const saveGoalBtn = document.getElementById('saveGoal')
    const goalMenuBtn = document.querySelector('.menu-btn-target button')
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ü–µ–ª–µ–π
    if (goalMenuBtn) {
        goalMenuBtn.addEventListener('click', openGoalModalForNew)
    }
    
    if (saveGoalBtn) {
        saveGoalBtn.addEventListener('click', saveGoalFromModal)
    }
    
    if (closeGoalModal) {
        closeGoalModal.addEventListener('click', () => {
            if (goalModal) goalModal.style.display = 'none'
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–µ
    window.addEventListener('click', (e) => {
        if (e.target === goalModal) {
            goalModal.style.display = 'none'
        }
    })

    // –ú–æ–¥–∞–ª–∫–∏ –î–æ—Ö–æ–¥–æ–≤/–†–∞—Å—Ö–æ–¥–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω —Å–±—Ä–æ—Å)
    if (incomeBtn) incomeBtn.addEventListener("click", () => {
        editingTransactionIndex = null;
        editingTransactionIsIncome = null;
        resetIncomeModal();
        
        const titleEl = incomeModal.querySelector('h2');
        if (titleEl) titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥';
        
        incomeModal.style.display = "block";
    })

    if (expensesBtn) expensesBtn.addEventListener("click", () => {
        editingTransactionIndex = null;
        editingTransactionIsIncome = null;
        resetExpensesModal();
        
        const titleEl = expensesModal.querySelector('h2');
        if (titleEl) titleEl.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É';
        
        expensesModal.style.display = "block";
    })
    if (closeIncomeModal) closeIncomeModal.addEventListener("click", () => incomeModal.style.display = "none")
    if (closeExpensesModal) closeExpensesModal.addEventListener("click", () => expensesModal.style.display = "none")

    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –û–¥–∏–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
    window.addEventListener("click", (e) => {
        if (e.target === incomeModal) incomeModal.style.display = "none"
        if (e.target === expensesModal) expensesModal.style.display = "none"
        if (e.target === accountModal) accountModal.style.display = "none"
    if (e.target === goalModal) goalModal.style.display = "none" 
   })

    // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if (addIncomeBtn) addIncomeBtn.addEventListener("click", addIncome)
    if (incomeInput) incomeInput.addEventListener("keydown", (e) => { if (e.key === "Enter") addIncome() })
    if (addExpensesBtn) addExpensesBtn.addEventListener("click", addExpense)
    if (expensesInput) expensesInput.addEventListener("keydown", (e) => { if (e.key === "Enter") addExpense() })

    // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
    const economyPeriodButtons = document.querySelectorAll('.economy .period-btn')
    economyPeriodButtons.forEach(button => {
        button.addEventListener('click', function() {
            economyPeriodButtons.forEach(btn => btn.classList.remove('period-active'))
            this.classList.add('period-active')
            const selectedPeriod = this.getAttribute('data-period')
            updateContent(selectedPeriod, 'economy')
        })
    })

    const chartPeriodButtons = document.querySelectorAll('.dashboard .period-btn')
    chartPeriodButtons.forEach(button => {
        button.addEventListener('click', function() {
            chartPeriodButtons.forEach(btn => btn.classList.remove('period-active'))
            this.classList.add('period-active')
            const selectedPeriod = this.getAttribute('data-period')
            updateContent(selectedPeriod, 'chart')
        })
    })

    // --- 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ---
    renderGoals()
    renderAccounts()
    updateContent('month', 'all') // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    renderTransactionsList()
})